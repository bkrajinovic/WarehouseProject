// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Warehouse;

namespace Warehouse.Migrations
{
    [DbContext(typeof(WarehouseContext))]
    partial class WarehouseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Warehouse.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2019, 8, 13, 10, 18, 58, 195, DateTimeKind.Utc).AddTicks(3324),
                            Name = "Velika Gorica",
                            UpdatedAt = new DateTime(2019, 8, 13, 10, 18, 58, 195, DateTimeKind.Utc).AddTicks(3325),
                            Zip = "10410"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2019, 8, 13, 10, 18, 58, 195, DateTimeKind.Utc).AddTicks(4338),
                            Name = "Zagreb",
                            UpdatedAt = new DateTime(2019, 8, 13, 10, 18, 58, 195, DateTimeKind.Utc).AddTicks(4338),
                            Zip = "10000"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2019, 8, 13, 10, 18, 58, 195, DateTimeKind.Utc).AddTicks(4348),
                            Name = "Split",
                            UpdatedAt = new DateTime(2019, 8, 13, 10, 18, 58, 195, DateTimeKind.Utc).AddTicks(4348),
                            Zip = "21000"
                        });
                });

            modelBuilder.Entity("Warehouse.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2019, 8, 13, 10, 18, 58, 195, DateTimeKind.Utc).AddTicks(7915),
                            FirstName = "Antonio",
                            LastName = "Samardzic",
                            UpdatedAt = new DateTime(2019, 8, 13, 10, 18, 58, 195, DateTimeKind.Utc).AddTicks(7915),
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2019, 8, 13, 10, 18, 58, 195, DateTimeKind.Utc).AddTicks(8661),
                            FirstName = "Bruno",
                            LastName = "Krajinovic",
                            UpdatedAt = new DateTime(2019, 8, 13, 10, 18, 58, 195, DateTimeKind.Utc).AddTicks(8661),
                            WarehouseId = 2
                        });
                });

            modelBuilder.Entity("Warehouse.Models.Goods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CurrentAmount");

                    b.Property<DateTime?>("DateOfManufacture");

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<int>("MinimalAmount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int?>("PositionId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired();

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("WarehouseId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Goods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2019, 8, 13, 10, 18, 58, 196, DateTimeKind.Utc).AddTicks(3530),
                            CurrentAmount = 1554,
                            DateOfManufacture = new DateTime(2019, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationDate = new DateTime(2020, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimalAmount = 1345,
                            Name = "Cake",
                            Price = 12.99m,
                            UnitOfMeasure = "pcs",
                            UpdatedAt = new DateTime(2019, 8, 13, 10, 18, 58, 196, DateTimeKind.Utc).AddTicks(3531),
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2019, 8, 13, 10, 18, 58, 196, DateTimeKind.Utc).AddTicks(9350),
                            CurrentAmount = 1554,
                            DateOfManufacture = new DateTime(2019, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationDate = new DateTime(2020, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimalAmount = 1345,
                            Name = "Milk",
                            Price = 4.99m,
                            UnitOfMeasure = "l",
                            UpdatedAt = new DateTime(2019, 8, 13, 10, 18, 58, 196, DateTimeKind.Utc).AddTicks(9351),
                            WarehouseId = 2
                        });
                });

            modelBuilder.Entity("Warehouse.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("PositionOnShelf")
                        .IsRequired();

                    b.Property<string>("Shelf")
                        .IsRequired();

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2019, 8, 13, 10, 18, 58, 197, DateTimeKind.Utc).AddTicks(1995),
                            Name = "Cake",
                            PositionOnShelf = "1",
                            Shelf = "D",
                            UpdatedAt = new DateTime(2019, 8, 13, 10, 18, 58, 197, DateTimeKind.Utc).AddTicks(1995)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2019, 8, 13, 10, 18, 58, 197, DateTimeKind.Utc).AddTicks(2681),
                            Name = "Milk",
                            PositionOnShelf = "1",
                            Shelf = "A",
                            UpdatedAt = new DateTime(2019, 8, 13, 10, 18, 58, 197, DateTimeKind.Utc).AddTicks(2681)
                        });
                });

            modelBuilder.Entity("Warehouse.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CreatedAt = new DateTime(2019, 8, 13, 10, 18, 58, 197, DateTimeKind.Utc).AddTicks(5470),
                            Name = "Dukat",
                            Street = "Ilica 34",
                            UpdatedAt = new DateTime(2019, 8, 13, 10, 18, 58, 197, DateTimeKind.Utc).AddTicks(5470)
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            CreatedAt = new DateTime(2019, 8, 13, 10, 18, 58, 197, DateTimeKind.Utc).AddTicks(6193),
                            Name = "Podravka",
                            Street = "Kurilovecka 5",
                            UpdatedAt = new DateTime(2019, 8, 13, 10, 18, 58, 197, DateTimeKind.Utc).AddTicks(6193)
                        },
                        new
                        {
                            Id = 3,
                            CityId = 3,
                            CreatedAt = new DateTime(2019, 8, 13, 10, 18, 58, 197, DateTimeKind.Utc).AddTicks(6203),
                            Name = "Kras",
                            Street = "Splitska 23",
                            UpdatedAt = new DateTime(2019, 8, 13, 10, 18, 58, 197, DateTimeKind.Utc).AddTicks(6203)
                        });
                });

            modelBuilder.Entity("Warehouse.Models.Employee", b =>
                {
                    b.HasOne("Warehouse.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Warehouse.Models.Goods", b =>
                {
                    b.HasOne("Warehouse.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.HasOne("Warehouse.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Warehouse.Models.Warehouse", b =>
                {
                    b.HasOne("Warehouse.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
