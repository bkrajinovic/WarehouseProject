// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Warehouse;

namespace Warehouse.Migrations
{
    [DbContext(typeof(WarehouseContext))]
    [Migration("20190826095841_InitialCreate3")]
    partial class InitialCreate3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Warehouse.Models.AuthUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Warehouse.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2019, 8, 26, 9, 58, 40, 902, DateTimeKind.Utc).AddTicks(695),
                            Name = "Velika Gorica",
                            UpdatedAt = new DateTime(2019, 8, 26, 9, 58, 40, 902, DateTimeKind.Utc).AddTicks(696),
                            Zip = "10410"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2019, 8, 26, 9, 58, 40, 902, DateTimeKind.Utc).AddTicks(3955),
                            Name = "Zagreb",
                            UpdatedAt = new DateTime(2019, 8, 26, 9, 58, 40, 902, DateTimeKind.Utc).AddTicks(3956),
                            Zip = "10000"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2019, 8, 26, 9, 58, 40, 902, DateTimeKind.Utc).AddTicks(3989),
                            Name = "Split",
                            UpdatedAt = new DateTime(2019, 8, 26, 9, 58, 40, 902, DateTimeKind.Utc).AddTicks(3990),
                            Zip = "21000"
                        });
                });

            modelBuilder.Entity("Warehouse.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2019, 8, 26, 9, 58, 40, 903, DateTimeKind.Utc).AddTicks(6484),
                            FirstName = "Antonio",
                            LastName = "Samardzic",
                            UpdatedAt = new DateTime(2019, 8, 26, 9, 58, 40, 903, DateTimeKind.Utc).AddTicks(6486),
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2019, 8, 26, 9, 58, 40, 903, DateTimeKind.Utc).AddTicks(9177),
                            FirstName = "Bruno",
                            LastName = "Krajinovic",
                            UpdatedAt = new DateTime(2019, 8, 26, 9, 58, 40, 903, DateTimeKind.Utc).AddTicks(9178),
                            WarehouseId = 2
                        });
                });

            modelBuilder.Entity("Warehouse.Models.Goods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CurrentAmount");

                    b.Property<DateTime?>("DateOfManufacture");

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<int>("MinimalAmount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int?>("PositionId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired();

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("WarehouseId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Goods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2019, 8, 26, 9, 58, 40, 905, DateTimeKind.Utc).AddTicks(5346),
                            CurrentAmount = 1554,
                            DateOfManufacture = new DateTime(2019, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationDate = new DateTime(2020, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimalAmount = 1345,
                            Name = "Cake",
                            Price = 12.99m,
                            UnitOfMeasure = "pcs",
                            UpdatedAt = new DateTime(2019, 8, 26, 9, 58, 40, 905, DateTimeKind.Utc).AddTicks(5348),
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2019, 8, 26, 9, 58, 40, 911, DateTimeKind.Utc).AddTicks(4102),
                            CurrentAmount = 1554,
                            DateOfManufacture = new DateTime(2019, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpirationDate = new DateTime(2020, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimalAmount = 1345,
                            Name = "Milk",
                            Price = 4.99m,
                            UnitOfMeasure = "l",
                            UpdatedAt = new DateTime(2019, 8, 26, 9, 58, 40, 911, DateTimeKind.Utc).AddTicks(4103),
                            WarehouseId = 2
                        });
                });

            modelBuilder.Entity("Warehouse.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("PositionOnShelf")
                        .IsRequired();

                    b.Property<string>("Shelf")
                        .IsRequired();

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2019, 8, 26, 9, 58, 40, 912, DateTimeKind.Utc).AddTicks(5005),
                            Name = "Cake",
                            PositionOnShelf = "1",
                            Shelf = "D",
                            UpdatedAt = new DateTime(2019, 8, 26, 9, 58, 40, 912, DateTimeKind.Utc).AddTicks(5006)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2019, 8, 26, 9, 58, 40, 912, DateTimeKind.Utc).AddTicks(7490),
                            Name = "Milk",
                            PositionOnShelf = "1",
                            Shelf = "A",
                            UpdatedAt = new DateTime(2019, 8, 26, 9, 58, 40, 912, DateTimeKind.Utc).AddTicks(7491)
                        });
                });

            modelBuilder.Entity("Warehouse.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CreatedAt = new DateTime(2019, 8, 26, 9, 58, 40, 913, DateTimeKind.Utc).AddTicks(7502),
                            Name = "Dukat",
                            Street = "Ilica 34",
                            UpdatedAt = new DateTime(2019, 8, 26, 9, 58, 40, 913, DateTimeKind.Utc).AddTicks(7503)
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            CreatedAt = new DateTime(2019, 8, 26, 9, 58, 40, 914, DateTimeKind.Utc).AddTicks(285),
                            Name = "Podravka",
                            Street = "Kurilovecka 5",
                            UpdatedAt = new DateTime(2019, 8, 26, 9, 58, 40, 914, DateTimeKind.Utc).AddTicks(286)
                        },
                        new
                        {
                            Id = 3,
                            CityId = 3,
                            CreatedAt = new DateTime(2019, 8, 26, 9, 58, 40, 914, DateTimeKind.Utc).AddTicks(321),
                            Name = "Kras",
                            Street = "Splitska 23",
                            UpdatedAt = new DateTime(2019, 8, 26, 9, 58, 40, 914, DateTimeKind.Utc).AddTicks(322)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Warehouse.Models.AuthUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Warehouse.Models.AuthUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Warehouse.Models.AuthUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Warehouse.Models.AuthUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Warehouse.Models.Employee", b =>
                {
                    b.HasOne("Warehouse.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Warehouse.Models.Goods", b =>
                {
                    b.HasOne("Warehouse.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.HasOne("Warehouse.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Warehouse.Models.Warehouse", b =>
                {
                    b.HasOne("Warehouse.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
